pipeline {
 agent {
 label 'jenkins-agent'
 }
 environment {
     PIPELINE_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
     HARBOR_REGISTRY = 'harbor.dev.afsmtddso.com'
     HARBOR_PROJECT = 'rashadmorton-devsecops'
     APP_IMAGE_NAME = 'app'
     DB_IMAGE_NAME = 'db'
 }    
 stages {
 stage('Application repository') {
 steps {
 echo "cloning application repository"
 sh 'git clone https://github.com/rashadmorton/afs-labs-student.git'
 dir('afs-labs-student') {
    script{
        env.APP_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }
  }  
 }
 }
 stage('Application docker build') {
 steps {
 echo "Building application image"

withCredentials([usernameColonPassword(credentialsId: 'rashadmorton-harbor-auth', variable: 'HARBOR-AUTH')]) {
    script {
       docker.build('$APP_IMAGE_NAME-$APP_HASH', '-f ./app/Dockerfile ./afs-labs-student')
       docker.withRegistry('https://$HARBOR_REGISTRY', 'rashadmorton-harbor-auth') {
       sh 'docker tag $APP_IMAGE_NAME-$APP_HASH $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
           sh 'docker push $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
       }
    }   
} 
post { 
    always {
         echo "Clean local $APP_IMAGE_NAME image"
         script {
             try {
                 sh 'docker rmi $APP_IMAGE_NAME-$APP_HASH:latest'
                 sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
             } catch (err) {
                echo err.getMessage()
}
}
}
stage('Test'){
 steps {
 echo "Testing stage"
 }
 }
 stage('Deploy') {
 steps {
 echo "Deployment stage"
 sh 'kubectl -n rashadmorton set image deployment/app-deployment app-deployment=$HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
 }
 }
 post {
 cleanup {
       echo "Clean workspace"
       sh 'docker system prune -f'
       sh 'rm -rf .git ./*'
     } 
 }


